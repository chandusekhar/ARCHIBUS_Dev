<view version="2.0">
    <js file="ab-proj-at-risk-work-pkgs.js"/>
    <message name="budget_excess">Budget exceeded costs</message>
    <message name="cost_equal_budget">Costs equal to budget</message>
    <message name="cost_exceeded_budget">Costs exceed budget</message>
    <message name="ahead_of_schedule">Ahead of schedule</message>
    <message name="equal_to_schedule">As scheduled</message>
    <message name="behind_schedule">Behind schedule</message>
      
  	<dataSource id="projAtRiskWorkPkgsDs0" type="grouping" applyVpaRestrictions="false">
        <table name="activity_log" role="main"/>
        <field name="work_pkg_id" table="activity_log" groupBy="true"/>
        <field name="budgeted_cost_of_work_perf" dataType="number" decimals="0" >
            <title>Budgeted Cost of Work Performed</title>
            <sql dialect="generic">SUM(budgeted_cost_of_work_perf)</sql>
        </field>
        <field name="actual_cost_of_work_performed" dataType="number" decimals="0" >
            <title>Actual Cost of Work Performed</title>
            <sql dialect="generic">SUM(actual_cost_of_work_performed)</sql>
        </field>
        <field name="cost_performance_index_value" dataType="number" decimals="4">
            <title>Cost Performance Index</title>
            <sql dialect="generic">SUM(cost_performance_index_value)</sql>
        </field>
        <field name="cost_performance_comment" dataType="text">
            <title>Cost Performance Comment</title>
            <sql dialect="generic">MAX(cost_performance_comment)</sql>
        </field>
        <field name="scheduled_perf_index_value" dataType="number" decimals="4">
            <title>Scheduled Performance Index</title>
            <sql dialect="generic">SUM(scheduled_perf_index_value)</sql>
        </field>
        <field name="scheduled_performance_comment" dataType="text">
            <title>Scheduled Performance Comment</title>
            <sql dialect="generic">MAX(scheduled_performance_comment)</sql>
        </field>
        <sql dialect="generic">
            SELECT cost_performance_index.work_pkg_id, cost_performance_index.project_id, 
                   cost_performance_index.budgeted_cost_of_work_perf, cost_performance_index.actual_cost_of_work_performed, 
                   cost_performance_index.budgeted_cost_of_work_perf/cost_performance_index.actual_cost_of_work_performed ${sql.as} cost_performance_index_value, 
                   (CASE WHEN (cost_performance_index.budgeted_cost_of_work_perf/cost_performance_index.actual_cost_of_work_performed)>1 
                    THEN ${parameters['budget_excess']} ELSE (CASE WHEN (cost_performance_index.budgeted_cost_of_work_perf/cost_performance_index.actual_cost_of_work_performed)=1 
                    THEN ${parameters['cost_equal_budget']} ELSE ${parameters['cost_exceeded_budget']} END) END) ${sql.as} cost_performance_comment, 
                    cost_performance_index.budgeted_cost_of_work_perf/scheduled_performance_index.budgeted_cost_for_work_sched ${sql.as} scheduled_perf_index_value, 
                    (CASE WHEN (cost_performance_index.budgeted_cost_of_work_perf/scheduled_performance_index.budgeted_cost_for_work_sched)>1 
                      THEN ${parameters['ahead_of_schedule']} ELSE (CASE WHEN (cost_performance_index.budgeted_cost_of_work_perf/scheduled_performance_index.budgeted_cost_for_work_sched)=1 
                      THEN ${parameters['equal_to_schedule']} ELSE ${parameters['behind_schedule']} END) END) ${sql.as} scheduled_performance_comment FROM 
                  ( SELECT work_pkg_id, project_id, sum(cost_est_design_cap + cost_est_design_exp) ${sql.as} budgeted_cost_of_work_perf, 
                  (CASE WHEN sum(cost_act_cap + cost_actual)=0 THEN 1 ELSE sum(cost_act_cap + cost_actual) END ) ${sql.as} actual_cost_of_work_performed 
            FROM activity_log WHERE work_pkg_id IS NOT NULL AND activity_log.status IN ('COMPLETED', 'COMPLETED-V', 'CLOSED') AND ${sql.vpaRestriction} 
            GROUP BY project_id, work_pkg_id) ${sql.as} cost_performance_index, 
            ( SELECT work_pkg_id, project_id, (CASE WHEN sum(cost_est_design_cap + cost_est_design_exp)=0 THEN 1 
                ELSE sum(cost_est_design_cap + cost_est_design_exp) END ) ${sql.as} budgeted_cost_for_work_sched 
            FROM activity_log 
            WHERE work_pkg_id IS NOT NULL AND activity_log.status IN ('PLANNED','SCHEDULED','IN PROGRESS') AND ${sql.vpaRestriction} 
                GROUP BY project_id, work_pkg_id) ${sql.as} scheduled_performance_index 
            WHERE cost_performance_index.project_id = scheduled_performance_index.project_id 
              AND cost_performance_index.work_pkg_id = scheduled_performance_index.work_pkg_id  
            </sql>
            <parameter name="budget_excess" value="Budget exceeded costs" dataType="text"/>
            <parameter name="cost_equal_budget" value="Costs equal to budget" dataType="text"/>
            <parameter name="cost_exceeded_budget" value="Costs exceed budget" dataType="text"/>
            <parameter name="ahead_of_schedule" value="Ahead of schedule" dataType="text"/>
            <parameter name="equal_to_schedule" value="As scheduled" dataType="text"/>
            <parameter name="behind_schedule" value="Behind schedule" dataType="text"/>
          <sortField name="work_pkg_id" table="activity_log" ascending="true"/>
    </dataSource>

    <panel type="crossTable" id="projAtRiskWorkPkgsCrossTable" dataSource="projAtRiskWorkPkgsDs0" showOnLoad="false">
        <title>At Risk Work Packages</title>
        <action id="exportXLS">
            <title>XLS</title>
            <command type="exportPanel" outputType="xls" panelId="projAtRiskWorkPkgsCrossTable"/>
        </action> 
        <event type="onClickItem">
            <command type="callFunction" functionName="projAtRiskWorkPkgsCrossTable_onclick"/>
        </event>                    
    </panel>
</view>
    
 
 
 
 
