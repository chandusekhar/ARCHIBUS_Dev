/*
 * Copyright 2004, 2005, 2006 Acegi Technology Pty Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package org.springframework.security.ui.preauth;

import java.util.*;

import javax.servlet.http.HttpServletRequest;

/**
 * A holder of selected HTTP details related to a web authentication request.
 * <p>
 * Has additional <tt>attributes</tt> property.
 *
 * @author Valery Tydykov
 */
public class AuthenticationDetailsImpl
        extends org.springframework.security.web.authentication.WebAuthenticationDetails {
    /**
     * Constant: serial Version UID.
     */
    private static final long serialVersionUID = -1940319476893788196L;

    /**
     * Property: Authentication details.
     */
    private Map<String, String> attributes = new HashMap<String, String>();

    /**
     * Constructor specifying request.
     *
     * @param request that might be used to obtain authentication details.
     */
    public AuthenticationDetailsImpl(final HttpServletRequest request) {
        super(request);
    }

    @Override
    // Justification: implementation generated by Eclipse.
    @SuppressWarnings("PMD.OnlyOneReturn")
    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!super.equals(obj)) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final AuthenticationDetailsImpl other = (AuthenticationDetailsImpl) obj;
        if (this.attributes == null) {
            if (other.attributes != null) {
                return false;
            }
        } else if (!this.attributes.equals(other.attributes)) {
            return false;
        }
        return true;
    }

    /**
     * Getter for the attributes property.
     *
     * @see attributes
     * @return the attributes property.
     */
    public Map<String, String> getAttributes() {
        return this.attributes;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result + (this.attributes == null ? 0 : this.attributes.hashCode());
        return result;
    }

    /**
     * Setter for the attributes property.
     *
     * @see attributes
     * @param attributes the attributes to set.
     */

    public void setAttributes(final Map<String, String> attributes) {
        this.attributes = attributes;
    }
}
