package com.archibus.app.solution.common.webservice.employee.client;

import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.*;

/**
 * This class was generated by Apache CXF 2.2.5 Wed Jan 13 11:18:18 EST 2010 Generated source
 * version: 2.2.5
 * 
 * Renamed class to have "ServiceProxyImpl" postfix. Removed wsdlLocation attribute and static field
 * since loading WSDL from a file is not practical. The default implementation was loading WSDL from
 * a file. WSDL contains the server URL. We don't want to configure server URL in each WSDL file.
 * The only option left (with CXF) is to specify server URL in configuration file, and load WSDL
 * from the server. To avoid performance hit, load WSDL once, when WebService client instance is
 * initialized.
 * 
 * @author - Valery Tydykov
 */

@WebServiceClient(name = "EmployeeService", wsdlLocation = "file:EmployeeService.wsdl", targetNamespace = "http://server.employee.webservice.mycompany.com/")
public class EmployeeServiceProxyImpl extends Service {

    public final static QName SERVICE = new QName(
        "http://server.employee.webservice.mycompany.com/", "EmployeeService");

    public final static QName EmployeeServiceSoapPort = new QName(
        "http://server.employee.webservice.mycompany.com/", "EmployeeServiceSoapPort");

    public EmployeeServiceProxyImpl(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public EmployeeServiceProxyImpl(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    /**
     * 
     * @return returns EmployeeService
     */
    @WebEndpoint(name = "EmployeeServiceSoapPort")
    public EmployeeService getEmployeeServiceSoapPort() {
        return super.getPort(EmployeeServiceSoapPort, EmployeeService.class);
    }

    /**
     * 
     * @param features A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.
     *            Supported features not in the <code>features</code> parameter will have their
     *            default values.
     * @return returns EmployeeService
     */
    @WebEndpoint(name = "EmployeeServiceSoapPort")
    public EmployeeService getEmployeeServiceSoapPort(WebServiceFeature... features) {
        return super.getPort(EmployeeServiceSoapPort, EmployeeService.class, features);
    }

}
