/**
 * Example: wizard form with customized UI style.
 * This example does not contain any real functionality as is intended only to show UI customization options.
 *
 * The UI is created as a combination of:
 * 1) standard view panels, with additional CSS classes;
 * 2) HTML panels with static HTML content defined in the view;
 * 3) dynamic HTML content generated by JS code using templates.
 *
 * Use standard view panels whenever possible.
 * Use HTML panels when standard panels do not suffice and the HTML content is known in advance.
 * Use dynamic HTML content to show data that is calculated or retrieved from the server.
 */
View.createController('exWizardStyle', {

    /**
     * Maps DOM events to event listeners. Each event is defined using the following format:
     *
     * 'eventName elementSelector': eventListenerFunction
     *
     * eventName is a valid DOM event name (see http://en.wikipedia.org/wiki/DOM_events for complete list).
     * elementSelector is a jQuery selector that specifies which DOM element or elements trigger the event (see http://api.jquery.com/category/selectors/).
     * eventListenerFunction is a function that will be called when the event is triggered.
     */
    events: {
        /**
         * When the user clicks on any <a> element that is inside an element with class 'list-item',
         * call the onClickListItem controller method.
         *
         * @param event
         */
        'click .exListItem a.exListItemDelete': function(event) {
            // The recommended practice is to make controller methods independent of DOM event implementation details,
            // and only pass regular Java Script parameters - strings, integers, dates, etc.
            this.onClickListItem(event.target.id);
        },
        'click .exListItem a.exListItemEdit': function(event) {
            // The recommended practice is to make controller methods independent of DOM event implementation details,
            // and only pass regular Java Script parameters - strings, integers, dates, etc.
            this.onClickListItem(event.target.id);
        }
    },

    /**
     * Called when the user clicks on any list item.
     * @param id The list item id.
     */
    onClickListItem: function(id) {
        View.alert('You clicked on item ' + id);
    },

    /**
     * Create additional HTML content. In a real application the additional content will often be
     * based on data retrieved from the database, or on actual user input.
     */
    afterInitialDataFetch: function() {
        this.showWorkflow();
        this.showOptionalSteps();
        this.showSummary();
    },

    /**
     * Shows workflow step titles and arrows to the left of On-Demand Workflow forms.
     */
    showWorkflow: function() {
        var showWorkflowForPanel = function(id) {
            // The HTML template for each workflow form title/arrow is defined in in ab-ex-html-templates.axvw.
            var workflowFormTemplate = View.templates.get('workflowFormTemplate');

            // Render the template and prepend the rendered HTML before the content of the form.
            workflowFormTemplate.render({
                    // Specify parameters for the template here.
                    title: getMessage(id + 'Title')
                },
                '#' + id,
                'before');
        };

        showWorkflowForPanel('workflowStepRequestedForm');
        showWorkflowForPanel('workflowStepApprovedForm');
        showWorkflowForPanel('workflowStepIssuedForm');
        showWorkflowForPanel('workflowOptionsForm');
    },

    /**
     * Shows some (fake) optional steps to workflow forms.
     */
    showOptionalSteps: function() {
        var addOptionalStep = function(el, id, title) {
            // The HTML template for an optional step is defined in in ab-ex-html-templates.axvw.
            var workflowOptionalStepTemplate = View.templates.get('workflowOptionalStepTemplate');

            // Render one optional step inside the Requested Optional Steps field TD element.
            workflowOptionalStepTemplate.render({
                    id: id,
                    title: title
                },
                el,
                'before');
        };

        addOptionalStep(this.workflowStepRequestedForm.getFieldCell('requestedOptionalSteps'), 'approve-AFM', 'Approve by AFM');
        addOptionalStep(this.workflowStepApprovedForm.getFieldCell('approvedOptionalSteps'), 'estimation-supervisor', 'Estimation by supervisor');
        addOptionalStep(this.workflowStepApprovedForm.getFieldCell('approvedOptionalSteps'), 'scheduling-supervisor', 'Scheduling by supervisor');
        addOptionalStep(this.workflowStepIssuedForm.getFieldCell('issuedOptionalSteps'), 'notify-JOSEPHWILLIAM', 'Notify JOSEPTH, WILLIAM');
        addOptionalStep(this.workflowStepIssuedForm.getFieldCell('issuedOptionalSteps'), 'notify-AFM', 'Notify AFM');
    },

    /**
     * Shows some (fake) summary information in the Summary footer.
     */
    showSummary: function () {
        // Load any helpdesk_sla_request record into the Request Parameters column report panel.
        // Display the panel content under the Request Parameters header in the Summary footer.
        var requestParameters = this.requestParametersDS.getRecord();
        this.requestParametersReport.setRecord(requestParameters);
        this.requestParametersReport.showAt('requestParametersSummary');

        // Render the workflow summary template under the On-Demand Workflow header in the Summary footer.
        // The template context is a sample (fake) data object defined in ab-ex-html-templates.js.
        // In a real application the data will be loaded from the database or entered by the user.
        View.templates.get('workflowSummaryTemplate').render(testContext, '#workflowSummary');
    }
});
