/**
 * 
 */
package com.archibus.eventhandler.steps;

import java.text.ParseException;
import java.util.*;

import org.json.JSONObject;

import com.archibus.eventhandler.helpdesk.HelpdeskStatusManager;
import com.archibus.eventhandler.helpdesk.TestAll;
import com.archibus.fixture.EventHandlerFixture;
import com.archibus.fixture.EventHandlerFixture.EventHandlerContextImplTest;
import com.archibus.jobmanager.EventHandlerContext;

import junit.extensions.TestSetup;
import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;


public class TestStepManagerImpl extends TestCase {
	
	   static final String ACTIVITY_ID = "AbBldgOpsHelpDesk";
	   

	/**
	 * @param arg0
	 */
	public TestStepManagerImpl(String arg0) {
		super(arg0);
	}
	
	private static EventHandlerFixture fixture = null;
	private static Object transactionContext = null;
	
	public static Test suite() {
		TestSuite testSuite = new TestSuite(TestStepManagerImpl.class);
		
		TestSetup wrapper = new TestSetup(testSuite) {
			
			public void setUp() throws Exception {				
				fixture = new EventHandlerFixture(this, "ab-ex-echo.axvw");
				fixture.setUp();
				transactionContext = fixture.beginTransaction();				 	       
			}
			
			public void tearDown() throws Exception {				 
				fixture.tearDown();				 
			}
			
		};		
		
		return wrapper;
	}  
	
    protected void setUp() throws Exception {
		if (TestAll.fixtureAll != null ) {
			fixture = TestAll.fixtureAll; 		
		} 
		// always start transaction
		transactionContext = fixture.beginTransaction();
	}

	protected void tearDown() throws Exception {		
		// always rollback at the end of a test method
		try{
			fixture.rollbackTransaction(transactionContext);
		} catch (Exception e){}
	}

	/**
	 * Test method for {@link com.archibus.eventhandler.steps.StepManagerImpl#StepManagerImpl(com.archibus.jobmanager.EventHandlerContext, java.lang.String, java.lang.String, int)}.
	 */
	public void testStepManagerImpl() {
		//do nothing
	}

	/**
	 * Test method for {@link com.archibus.eventhandler.steps.StepManagerImpl#isStepSequenceEnd()}.
	 */
	public void testIsStepSequenceEnd() {
		StepManagerImpl stepmgr = new StepManagerImpl();
		stepmgr.setStepSequenceEnd(true);
		
		assertEquals(stepmgr.isStepSequenceEnd(), true);
	}

	/**
	 * Test method for {@link com.archibus.eventhandler.steps.StepManagerImpl#getCurrentStep()}.
	 * @throws ParseException 
	 */
	public void testGetCurrentStep() throws ParseException {
		Map response = new HashMap();
        Map inputs = new HashMap();
        
        Map activity_log = new HashMap();
        
        activity_log.put("activity_log.requestor","AFM");
        activity_log.put("activity_log.phone_requestor","227-2508");
        activity_log.put("activity_log.site_id","MARKET");
        activity_log.put("activity_log.bl_id","HQ");
        activity_log.put("activity_log.fl_id","17");
        activity_log.put("activity_log.rm_id","126");
        activity_log.put("activity_log.location","test");
        activity_log.put("activity_log.eq_id","");
        activity_log.put("activity_log.prob_type","INSTALL");
        activity_log.put("activity_log.description","request generated by test");
        activity_log.put("activity_log.priority",new Integer(1));
        activity_log.put("activity_log.date_required","");
        activity_log.put("activity_log.activity_type","SERVICE DESK - MAINTENANCE");
        
        inputs.put("fields", activity_log);

		fixture.runEventHandlerMethod(
				"AbHelpdesk",
				"com.archibus.eventhandler.helpdesk.RequestHandler",
	            "saveRequest",
	            inputs,
	            response, transactionContext);
				
		assertNotNull(response.get("jsonExpression"));
			  
		JSONObject json = new JSONObject((String) response.get("jsonExpression"));
		int id = json.getInt("activity_log_id");
		
		EventHandlerContext context = new EventHandlerContextImplTest(inputs, fixture.getUserSession(), transactionContext, null);
		HelpdeskStatusManager mgr = new HelpdeskStatusManager(context,id);
		mgr.updateStatus("REQUESTED",StatusConverter.getActionDateField("REQUESTED"),StatusConverter.getActionTimeField("REQUESTED"));
		
		Map values = new HashMap();
		values.put("em_id", "AFM");
		values.put("step", "Manager Approval");
		values.put("step_type", "approval");
		values.put("step_status", "Requested");
		
		inputs = new HashMap();
		Approval app = new Approval(context,ACTIVITY_ID,id,values,"Manager Approval");
		app.setTableName("activity_log");
		app.setFieldName("activity_log_id");
		app.setStatusBefore("REQUESTED");
		app.logStep();
	
		StepManagerImpl stepmgr = new StepManagerImpl(context,ACTIVITY_ID,id);
		StepImpl step = (StepImpl) stepmgr.getCurrentStep();
		
		assertEquals(step.getStepOrder(),0);
		assertEquals(step.getEmId(),"AFM");
		assertEquals(step.getStepName(),"Manager Approval");
	}

	/**
	 * Test method for {@link com.archibus.eventhandler.steps.StepManagerImpl#getNextStep()}.
	 * @throws ParseException 
	 */
	public void testGetNextStep() throws ParseException {
		Map response = new HashMap();
        Map inputs = new HashMap();
        
        Map activity_log = new HashMap();
        
        activity_log.put("activity_log.requestor","AFM");
        activity_log.put("activity_log.phone_requestor","227-2508");
        activity_log.put("activity_log.site_id","MARKET");
        activity_log.put("activity_log.bl_id","HQ");
        activity_log.put("activity_log.fl_id","17");
        activity_log.put("activity_log.rm_id","126");
        activity_log.put("activity_log.location","test");
        activity_log.put("activity_log.eq_id","");
        activity_log.put("activity_log.description","request generated by test");
        activity_log.put("activity_log.priority",new Integer(1));
        activity_log.put("activity_log.date_required","");
        activity_log.put("activity_log.activity_type","SERVICE DESK - FURNITURE");
        
        inputs.put("fields", activity_log);

		fixture.runEventHandlerMethod(
				"AbBldgOpsHelpDesk",
				"com.archibus.eventhandler.helpdesk.RequestHandler",
	            "submitRequest",
	            inputs,
	            response, transactionContext);
				
		assertNotNull(response.get("jsonExpression"));
			  
		JSONObject json = new JSONObject((String) response.get("jsonExpression"));
		int id = json.getInt("activity_log_id");
		
		inputs = new HashMap();
		EventHandlerContext context = new EventHandlerContextImplTest(inputs, fixture.getUserSession(), transactionContext, null);

		StepManagerImpl stepmgr = new StepManagerImpl(context,ACTIVITY_ID,id);
 		
		StepImpl step = (StepImpl) stepmgr.getCurrentStep();
		assertNotNull(step);
		assertEquals(step.getStepOrder(),1);
		assertEquals(step.getStepName(),"Basic");
	}

	/**
	 * Test method for {@link com.archibus.eventhandler.steps.StepManagerImpl#invokeNextStep()}.
	 * @throws ParseException 
	 */
	public void testInvokeNextStep() throws ParseException {
		Map response = new HashMap();
        Map inputs = new HashMap();
        
        Map activity_log = new HashMap();
        
        activity_log.put("activity_log.requestor","AFM");
        activity_log.put("activity_log.phone_requestor","227-2508");
        activity_log.put("activity_log.site_id","MARKET");
        activity_log.put("activity_log.bl_id","HQ");
        activity_log.put("activity_log.fl_id","17");
        activity_log.put("activity_log.rm_id","126");
        activity_log.put("activity_log.location","test");
        activity_log.put("activity_log.eq_id","");
        activity_log.put("activity_log.description","request generated by test");
        activity_log.put("activity_log.priority",new Integer(1));
        activity_log.put("activity_log.date_required","");
        activity_log.put("activity_log.activity_type","SERVICE DESK - FURNITURE");
        
        inputs.put("fields", activity_log);

		fixture.runEventHandlerMethod(
				"AbHelpdesk",
				"com.archibus.eventhandler.helpdesk.RequestHandler",
	            "submitRequest",
	            inputs,
	            response, transactionContext);
				
		assertNotNull(response.get("jsonExpression"));
			  
		JSONObject json = new JSONObject((String) response.get("jsonExpression"));
		int id = json.getInt("activity_log_id");
		
		inputs = new HashMap();
		EventHandlerContext context = new EventHandlerContextImplTest(inputs, fixture.getUserSession(), transactionContext, null);
		
		StepManagerImpl stepmgr = new StepManagerImpl(context,ACTIVITY_ID,id);
		stepmgr.invokeNextStep();
	}

	/**
	 * Test method for {@link com.archibus.eventhandler.steps.StepManagerImpl#invokeFirstStep()}.
	 * @throws ParseException 
	 */
	public void testInvokeFirstStep() throws ParseException {
		Map response = new HashMap();
        Map inputs = new HashMap();
        
        Map activity_log = new HashMap();
        
        activity_log.put("activity_log.requestor","AFM");
        activity_log.put("activity_log.phone_requestor","227-2508");
        activity_log.put("activity_log.site_id","MARKET");
        activity_log.put("activity_log.bl_id","HQ");
        activity_log.put("activity_log.fl_id","17");
        activity_log.put("activity_log.rm_id","126");
        activity_log.put("activity_log.location","test");
        activity_log.put("activity_log.eq_id","");
        activity_log.put("activity_log.prob_type","INSTALL");
        activity_log.put("activity_log.description","request generated by test");
        activity_log.put("activity_log.priority",new Integer(1));
        activity_log.put("activity_log.date_required","");
        activity_log.put("activity_log.activity_type","SERVICE DESK - MAINTENANCE");
        
        inputs.put("fields", activity_log);

		fixture.runEventHandlerMethod(
				"AbHelpdesk",
				"com.archibus.eventhandler.helpdesk.RequestHandler",
	            "saveRequest",
	            inputs,
	            response, transactionContext);
				
		assertNotNull(response.get("jsonExpression"));
			  
		JSONObject json = new JSONObject((String) response.get("jsonExpression"));
		int id = json.getInt("activity_log_id");
		
		EventHandlerContext context = new EventHandlerContextImplTest(inputs, fixture.getUserSession(), transactionContext, null);
		StepManagerImpl stepmgr = new StepManagerImpl(context,ACTIVITY_ID,id);
		stepmgr.invokeFirstStep();
		
		fixture.commitTransaction(transactionContext);
		String where = "table_name='activity_log' AND pkey_value = " + id + " AND step_type='basic'";
		String[] fields = {"status","step"};
		String[] values = {"CREATED","Basic"};
		fixture.verifyRow("helpdesk_step_log", where, fields, values);		
	}

	public void testMultipleAcceptance() throws ParseException {
		
		Map response = new HashMap();
        Map inputs = new HashMap();
        
        Map activity_log = new HashMap();
        
        activity_log.put("activity_log.requestor","AFM");
        activity_log.put("activity_log.phone_requestor","227-2508");
        activity_log.put("activity_log.site_id","MARKET");
        activity_log.put("activity_log.bl_id","HQ");
        activity_log.put("activity_log.fl_id","17");
        activity_log.put("activity_log.rm_id","126");
        activity_log.put("activity_log.location","test");
        activity_log.put("activity_log.eq_id","");
        activity_log.put("activity_log.prob_type","INSTALL");
        activity_log.put("activity_log.description","request generated by test");
        activity_log.put("activity_log.priority",new Integer(1));
        activity_log.put("activity_log.date_required","");
        activity_log.put("activity_log.activity_type","SERVICE DESK - FURNITURE");
        
        inputs.put("fields", activity_log);

    	fixture.runEventHandlerMethod(
				"AbHelpdesk",
				"com.archibus.eventhandler.helpdesk.RequestHandler",
	            "saveRequest",
	            inputs,
	            response, transactionContext);
				
    	JSONObject json = new JSONObject((String) response.get("jsonExpression"));
		int id = json.getInt("activity_log_id");
		
		EventHandlerContext context = new EventHandlerContextImplTest(inputs, fixture.getUserSession(), transactionContext, null);
		StepManagerImpl stepmgr = new StepManagerImpl(context,ACTIVITY_ID,id);
		
		// no approvals
		stepmgr.invokeFirstStep();
		
		
		
		
	}
	
	
	/**
	 * Test method for {@link com.archibus.eventhandler.steps.StepManagerImpl#getSla()}.
	 *
	public void testGetSla() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link com.archibus.eventhandler.steps.StepManagerImpl#notifyRequestor()}.
	 *
	public void testNotifyRequestor() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link com.archibus.eventhandler.steps.StepManagerImpl#confirmStep(int, java.lang.String, java.lang.String)}.
	 *
	public void testConfirmStep() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link com.archibus.eventhandler.steps.StepManagerImpl#acceptStep(int, java.lang.String, java.lang.String)}.
	 *
	public void testAcceptStep() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link com.archibus.eventhandler.steps.StepManagerImpl#declineStep(int, java.lang.String, java.lang.String)}.
	 *
	public void testDeclineStep() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link com.archibus.eventhandler.steps.StepManagerImpl#rejectStep(int, java.lang.String, java.lang.String)}.
	 *
	public void testRejectStep() {
		fail("Not yet implemented");
	}
*/
}
