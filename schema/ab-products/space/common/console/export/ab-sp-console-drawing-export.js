/**
 * Controller for printing the drawing's PDF  report.
 *	  Added for 21.2 Space Console 
 *	 @Author Zhang Yi

 * Events:
 * app:space:express:console:printPDF
 */
var spaceExpressConsoleDrawingPdfCtrl = View.createController('spaceExpressConsoleDrawingExportCtrl', {

	/**
     * Constructor.
     */
    afterCreate: function() {
		this.on('app:space:express:console:printPDF', this.exportPdfReport);
		this.on('app:space:express:console:printDOCX', this.exportDocxReport);
    },
    
    /**
     * Print the drawing Pdf report.
     */
    exportPdfReport: function(filter,drawingPanel,selectedFloors, parameters) {
		this.printReport(drawingController, 'pdf', parameters) ; 
    },

    /**
     * Print the drawing Pdf report.
     */
    exportDocxReport: function(drawingController) {
		this.printReport(drawingController, 'docx') ; 
    }, 

	/**
     * Print the drawing Pdf report.
     */
    printReport: function(drawingController, exportType, pdfControlParameters) {
		var filter = drawingController.filter;

		var drawingPanel= drawingController.drawingPanel;
		var selectedFloors = drawingController.selectedFloors; 
    	var pdfRestrictions = {};
    	var pdfParameters = {};
    	pdfParameters.legends = {};
    
		//get highlight and label dataSource ids from drawing control
    	var highligtDS = drawingPanel.currentHighlightDS;
    	
    	var viewName = 'ab-sp-console-export-drawing-share-ds.axvw';
    	var legendDs = '';
    	
		if (pdfControlParameters && pdfControlParameters['legendDataSource']) {
    		legendDs = pdfControlParameters['legendDataSource'];
    	} else {
    		legendDs = highligtDS+ '_legend';
    	}
    	
    	var labelDS = drawingPanel.currentLabelsDS;
    	
    	//XXX: dataSources generated by loadDataSourceFromFile()
    	var hds = View.dataSources.get(highligtDS);
    	if ( hds && hds.fromFile ) {
    		viewName = viewName +';'+ hds.fromFile;
    		// when selecting Plan Type, need to use different legned ds name
			legendDs = highligtDS.replace("Highlight", "Legend");
    	}
    
    	var lds = View.dataSources.get(labelDS);
    	if ( lds && lds.fromFile ) {
    		viewName = viewName +';'+ lds.fromFile;
    	}

    	var rLegendDs = View.dataSources.get(legendDs);
    	if ( rLegendDs && rLegendDs.fromFile ) {
    		viewName = viewName +';'+ rLegendDs.fromFile;
    	}
    	
		//prepare restriction from filter and selected floors
		var passedRestrictions = {	};
		passedRestrictions[highligtDS] =  new Ab.view.Restriction();
		passedRestrictions[highligtDS].addClauses(filter.restriction);
		passedRestrictions[labelDS] =   new Ab.view.Restriction();
		passedRestrictions[labelDS].addClauses(filter.restriction);

		//highlight dataSource is required for paginated report
    	if(highligtDS === '' || highligtDS === 'None'){
    		highligtDS = 'dummyDs';
    	}

		//pass drawingName to skip core's expensive process to get it
		//pdfParameters.drawingName = selectedFloor.dwgName;
		//dataSources defined in a separate axvw which is shared with drawing control axvw
		pdfParameters.dataSources = {viewName:viewName, required:highligtDS + ';' + labelDS};	
		
		pdfParameters.highlightDataSource = 'rm:'+highligtDS;
		if(labelDS !== '' && labelDS !== 'None'){
			pdfParameters.labelsDataSource = 'rm:'+labelDS;
		}
		
		if(highligtDS !== 'dummyDs'){
			//add legend dataSource to required list
			pdfParameters.dataSources.required = pdfParameters.dataSources.required +  ';' + legendDs;
			
			//if legend panels are not defined in paginated report view, you could define legend panels dynamically
			//pdfParameters.legends.panelDefs= [this.getLegendPanel(legendDS)];
			
			//required legend panel
			pdfParameters.legends.required = 'panel_'+legendDs;
			
			//show room border highlight in PDF
			//pdfParameters.borderHighlight='rm:5';
		}
		
	  //prepare parameters from filter's parameters
		for ( attrubute in filter.parameters ) {
			if ('totalArea' == attrubute) {
				var value = filter.parameters[attrubute];
				var indexOfTotalArea = value.indexOf("total_area");
				var indexOfTotalCount = value.indexOf("total_count");
				if (indexOfTotalArea>0 && indexOfTotalCount>0) {
					pdfParameters['totalArea'] = value.substring(11,indexOfTotalCount-5);
					pdfParameters['totalCount'] = value.substring(indexOfTotalCount+12);  
				} else if (indexOfTotalCount>0) {
					pdfParameters['totalCount'] = value.substring(12);  									
				} else if (indexOfTotalArea>0) {
					pdfParameters['totalArea'] = value.substring(11);  																		
				}
			} else	{
				pdfParameters[attrubute+'ForTotalCal']=filter.parameters[attrubute].replace(/rm\./g,"r.");
				pdfParameters[attrubute] = filter.parameters[attrubute];
			}
		}
		
		//prepare parameters from print option dialog
		if (pdfControlParameters) {
			if (pdfControlParameters['scale']) {
				pdfParameters['scale'] = pdfControlParameters['scale'];
			}
			if (!pdfControlParameters['usePublishedLabelHeight']) {
				pdfParameters['labelHeight'] = "rm:" + pdfControlParameters['labelHeight'];
				pdfParameters['usePublishedLabelHeight'] = false;
			} else {
				pdfParameters['usePublishedLabelHeight'] = true;
			}
			if (pdfControlParameters['tableLedgerShadingColor']) {
				pdfParameters['tableLedgerShadingColor'] = pdfControlParameters['tableLedgerShadingColor'];
			}
			
			if ( pdfControlParameters && pdfControlParameters.selectionValues && pdfControlParameters.selectionValues['zoomedInOption']==='yes' ) {
				//kb#3049720: if user select print by 'zoom' selection, then only print single drawings in drawing panel. 
				var floor = drawingController.selectedFloors[0];
				pdfParameters['bl_id'] = " rm.bl_id='"+floor.bl_id+"'";
				pdfParameters['fl_id'] = " rm.fl_id='"+floor.fl_id+"'";
				pdfParameters['bl_idForTotalCal'] = " r.bl_id='"+floor.bl_id+"' ";
				pdfParameters['fl_idForTotalCal'] = " r.fl_id='"+floor.fl_id+"' ";
				passedRestrictions[labelDS].addClause('rm.bl_id', floor.bl_id, '=', null, true);
				passedRestrictions[labelDS].addClause('rm.fl_id', floor.fl_id, '=', null, true);
				passedRestrictions[highligtDS].addClause('rm.bl_id', floor.bl_id, '=', null, true);
				passedRestrictions[highligtDS].addClause('rm.fl_id', floor.fl_id, '=', null, true);
				if ( pdfControlParameters['drawingZoomInfo'] ) {
					pdfParameters['drawingZoomInfo'] = pdfControlParameters['drawingZoomInfo'];
				}
			}
					
			if (pdfControlParameters['labelLines']) {
				pdfParameters['labelLines'] = pdfControlParameters['labelLines'];
			}
			
			if (pdfControlParameters['hatchSize']) {
				pdfParameters['hatchSize'] = pdfControlParameters['hatchSize'];
			}
		}
		
		View.closeDialog();

		if (drawingController.backgroundSuffix) {
			pdfParameters['backgroundSuffix']=drawingController.backgroundSuffix.substring(1);
		}

		if(valueExistsNotEmpty(pdfParameters.highlightDataSource)){
			if (exportType === "docx") {
				View.openPaginatedReportDialog("ab-sp-console-export-drawing-docx.axvw", passedRestrictions, pdfParameters);
			} else if (exportType ===  "pdf"){
				View.openPaginatedReportDialog("ab-sp-console-export-drawing-pdf.axvw", passedRestrictions, pdfParameters);
			}
    	}
    }
});