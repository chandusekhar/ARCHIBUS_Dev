/**
 * Handles displaying views and saving Edit Panel data. Works with the Common.view.navigation.NavigationView class to
 * display and edit data views.
 *
 * Handles events generated by the Common.view.navigation.NavigationBar class for moving back one view, displaying edit
 * panels and saving edit panel data.
 *
 *
 * @author Jeff Martin
 * @since 21.1
 */
Ext.define('Common.controller.NavigationController', {
    extend: 'Ext.app.Controller',
    requires: ['Common.controller.EventBus', 'Common.control.Camera'],

    config: {
        refs: {
            mainView: null,
            navigationBar: 'navigationbar'
        },
        control: {
            navigationBar: {
                add: 'displayAddPanel',
                save: 'saveEditPanel'
            },
            'container[isNavigationList=true]': {
                itemDisclosed: 'beforeDisplayUpdatePanel',
                itemSingleTapped: 'beforeDisplayUpdatePanel'
            },
            mainView: {
                pop: 'onViewPopped',
                push: 'onViewPushed'
            }
        },

        // TODO: Remove
        lastPushedView: '',

        lastMaskedContainer: null
    },

    constructor: function (config) {
        var me = this;

        //<debug>
        if (!me.config.refs.mainView) {
            throw new Error(
                LocaleManager.getLocalizedString('A mainView ref config must be provided when extending the Common.controller.NavigationController class',
                    'Common.controller.NavigationController'));
        }
        //</debug>

        me.callParent([config]);

        if (Ext.os.is.Android) {
            document.addEventListener('backbutton', Ext.bind(me.onHardwareBackButtonPressed, me), false);
        }
    },

    /**
     * Activates the back button action. Does not pop the current view if
     * a modal window is displayed.
     * If the navigation controller is displaying the main view and the Apps button
     * is displayed the back button will navigate to the AppLauncher page.
     */
    onHardwareBackButtonPressed: function () {
        var me = this,
            navBar = me.getNavigationBar(),
            isRootView,
            backButton;

        // Check if the navigation bar exists and that a modal view is not displayed.
        if (navBar && !me.modalViewIsDisplayed()) {
            isRootView = (navBar.getViewStack().length === 0);
            if (isRootView) {
                // Go back to the AppLauncher
                Common.controller.EventBus.fireNavigateToAppLauncherEvent();
            } else {
                backButton = navBar.getBackButton();
                if (!backButton.getHidden()) {
                    navBar.onBackButtonTap();
                }
            }
        }
    },

    /**
     * Returns true if a modal popup is currently displayed in the Viewport
     * @private
     * @returns {boolean}
     */
    modalViewIsDisplayed: function () {
        var views = Ext.Viewport.getItems().items,
            mainView = this.getMainView(),
            isMainView,
            i;

        for (i = 0; i < views.length; i++) {
            isMainView = (mainView.xtype === views[i].xtype);
            if (!views[i].getHidden() && !isMainView) {
                return true;
            }
        }
        return false;
    },

    beforeDisplayUpdatePanel: function (view, record) {
        var me = this;

        view.setMasked({
            xtype: 'loadmask',
            message: ''
        });
        me.setLastMaskedContainer(view);

        // TODO: Breaks floor plan view.
        setTimeout(function () {
            me.displayUpdatePanel(view, record);
        }, 20);

    },

    /**
     * Displays an Edit Panel when the disclose action is fired by a List Panel. The Edit panel contains
     * the record from the list row that was clicked. The Edit Panel that is displayed is determined by
     * the List View editViewClass configuration property.
     *
     * @param {Ext.Container} view The List View that generated the itemDisclosed event.
     * @param {Ext.data.Model} record The record associated with the List View row that was clicked.
     */
    displayUpdatePanel: function (view, record) {
        var editView = view.getEditViewClass(),
            updateView = Ext.create(editView, {record: record});


        this.getMainView().push(updateView);
    },

    /**
     * Displays an Edit Panel for adding new records to the List View. The displayed Edit Panel is
     * determined by the List View editViewClass configuration setting.
     *
     * @param {Common.view.navigation.EditBase/Common.view.navigation.ListBase} currentView
     * The currently displayed view.
     */
    displayAddPanel: function (currentView) {
        var view = this.getModalAddPanel(currentView);

        Ext.Viewport.add(view);
        view.show();
    },

    getModalAddPanel: function (currentView, customPanelConfig) {
        var me = this,
            addViewClassName = currentView.config.addViewClass ? currentView.config.addViewClass : currentView.config.editViewClass,
            titleBar,
            title,
            defaultPanelConfig = {
                isCreateView: true,
                height: '100%',
                width: '100%',
                scrollable: {
                    direction: 'vertical',
                    directionLock: true
                },
                displayCameraIcon: false,
                appName: ''
            },
            view,
            panelConfig;

        // Windows Phone does not like the modal and zIndex properties. Only add these properties for the other
        // platforms.

        if (!Ext.os.is.WindowsPhone) {
            defaultPanelConfig.modal = true;
            defaultPanelConfig.zIndex = 10;
        }

        panelConfig = Ext.isEmpty(customPanelConfig) ? defaultPanelConfig : Ext.merge(defaultPanelConfig, customPanelConfig);

        view = Ext.create(addViewClassName, panelConfig);

        titleBar = view.down('titlebar');
        if (titleBar) {
            title = titleBar.getTitle();
            view.remove(titleBar);
        }

        view.add({
            xtype: 'titlebar',
            docked: 'top',
            cls: 'ab-titlebar',
            items: [
                {
                    xtype: 'button',
                    //text: LocaleManager.getLocalizedString('Cancel', 'Common.controller.NavigationController'),
                    iconCls: 'delete',
                    itemId: 'cancelButton',
                    align: 'left',
                    listeners: {
                        tap: function () {
                            Ext.Viewport.remove(view, true);
                        }
                    }
                },
                {
                    xtype: 'camera',
                    align: 'left',
                    iconCls: 'camera',
                    displayOn: 'all',
                    appName: panelConfig.appName,
                    hidden: Ext.isEmpty(panelConfig.displayCameraIcon) ? true : !panelConfig.displayCameraIcon
                },
                {
                    xtype: 'button',
                    //text: LocaleManager.getLocalizedString('Save', 'Common.controller.NavigationController'),
                    iconCls: 'check',
                    cls: 'ab-icon-action',
                    itemId: 'saveButton',
                    align: 'right',
                    listeners: {
                        tap: function () {
                            me.saveEditPanel(view);
                        }
                    }
                }
            ]
        });

        view.add({
            xtype: 'titlepanel',
            title: title,
            docked: 'top'
        });

        return view;
    },

    onViewPopped: Ext.emptyFn,

    /**
     *
     * @param [mainView]
     * @param [pushedView]
     */
    onViewPushed: function () {
        var me = this,
            lastMaskedContainer = me.getLastMaskedContainer();

        if (lastMaskedContainer !== null && Ext.isFunction(lastMaskedContainer.setMasked)) {
            lastMaskedContainer.setMasked(false);
            me.setLastMaskedContainer(false);
        }
    },

    /**
     * Saves the contents of the Edit Panel to the database Validates and displays validation errors on
     * the Edit Panel
     *
     * @param {Common.view.navigation.EditBase/Common.view.navigation.ListBase} currentView
     * The currently displayed view.
     */

    saveEditPanel: function (currentView) {
        var me = this,
            record = currentView.getRecord(),
            store = Ext.getStore(currentView.getStoreId());

        // Check validation
        if (record.isValid()) {
            record.setChangedOnMobile();
            store.add(record);
            store.sync(function () {
                if (currentView.getIsCreateView()) {
                    Ext.Viewport.remove(currentView);
                } else {
                    me.getMainView().pop();
                }
            });
        } else {
            currentView.displayErrors(record);
        }
    }
});