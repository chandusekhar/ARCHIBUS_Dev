<?xml version="1.0" encoding="utf-8"?>
<!--
********************************** DO NOT EDIT **********************************

This file will be replaced during upgrades so DO NOT EDIT this file. If you need to
adjust the process, reading and understanding this file is the first step.

In most cases, the adjustments can be achieved by setting properties or providing one
of the "hooks" in the form of a "-before-" or "-after-" target. Whenever possible, look
for one of these solutions.

Failing that, you can copy whole targets to your build.xml file and it will overrride
the target provided here. Doing that can create problems for upgrading to newer
versions of Cmd so it is not recommended but it will be easier to manage than editing
this file in most cases.
-->
<project name="archibus-build">

    <target name="copy-sencha-src">

        <x-load-properties>
            <!-- If available, load user-defined properties for this build identifier -->
            <file path="${src.dir}/build/archibus.properties" required="true"/>
        </x-load-properties>

        <if>
            <not>
                <available file="${src.dir}/touch/src/app" type="dir"/>
            </not>
            <then>
                <copy todir="${src.dir}/touch/src" preservelastmodified="true">
                    <fileset dir="${sencha.src.dir}">
                        <include name="**"/>
                    </fileset>
                </copy>
            </then>
        </if>

    </target>

    <target name="set-properties">
        <dirname file="${src.dir}" property="mobile.dir"/>
        <echo>---> mobile directory ${mobile.dir}</echo>
    </target>



    <target name="process-app-cache">
        <echo>Processing App Cache</echo>
        <echo>Languages to process "${language.include}"</echo>
        <java dir="." fork="true" failonerror="yes" classname="com.archibus.mobile.build.AppCache">
            <arg value="${app.name}"/>
            <arg value="${src.dir}"/>
            <arg value="${language.include}"/>
            <classpath>
                <pathelement location="${src.dir}/build/archibus-mobile-build.jar"/>
            </classpath>
        </java>

        <!-- copy the cache.appcache file to the application directory -->
        <copy file="${src.dir}/build/temp/cache.appcache" todir="${build.dir}" overwrite="true"/>
    </target>


    <target name="prepare-application-source"
            depends="set-properties, copy-sencha-src, minify-cordova, minify-libraries, clean-build-output">

        <property name="core.dir" location="../../../../ab-core" relative="true" basedir="${base.dir}"/>
        <echo>----> core directory ${core.dir}</echo>

        <!-- Create build directories if they do not exist -->
        <mkdir dir="${src.dir}/build/temp"/>
        <mkdir dir="${src.dir}/build/production"/>

        <!-- Delete the contents of the build temp directory -->
        <delete includeEmptyDirs="true">
            <fileset dir="${src.dir}/build/temp" includes="**/*" defaultexcludes="no"/>
        </delete>

        <!-- Delete the contents of the build production directory -->
        <delete includeEmptyDirs="true">
            <fileset dir="${src.dir}/build/production" includes="**/*" defaultexcludes="no"/>
        </delete>

        <echo>Processing language files</echo>
        <echo>Languages to process "${language.include}"</echo>
        <java dir="." fork="true" failonerror="yes" classname="com.archibus.mobile.build.Localization">
            <arg value="${app.name}"/>
            <arg value="${src.dir}"/>
            <arg value="${language.include}"/>
            <classpath>
                <pathelement location="${src.dir}/build/archibus-mobile-build.jar"/>
                <pathelement location="${src.dir}/build/json-smart-1.1.jar"/>
            </classpath>
        </java>

        <!-- only copy configured language and control files to the app folder -->
        <for list="${language.include}" param="prop">
            <sequential>
                <echo message="Copy language file: @{prop}=${@{prop}} "/>
                <copy todir="${app.dir}" file="${src.dir}/Common/resources/language/control_@{prop}.js" overwrite="true"/>
            </sequential>
        </for>

        <!-- always copy the format.js file -->
        <copy todir="${app.dir}" file="${src.dir}/Common/resources/language/format.js" overwrite="true"/>

        <!-- copy the optimized language files to the app folder. This overwrites the full language file.
             the full language file is used if there was an error in the language file optimization process -->
        <mkdir dir="${src.dir}/build/temp/language"/>
        <copy todir="${app.dir}" overwrite="true">
            <fileset dir="${src.dir}/build/temp/language">
                <include name="*.js"/>
            </fileset>
        </copy>

        <!-- Copy library files -->
        <copy todir="${app.dir}">
            <fileset dir="${src.dir}/Common/lib">
                <exclude name="**/cordova/**"/>
            </fileset>
        </copy>

        <!-- Copy Language files -->
        <copy todir="${app.dir}">
            <fileset dir="${src.dir}/Common/lang">
                <include name="LocaleManager.js"/>
            </fileset>
        </copy>

        <!-- Copy d3.min.js file -->
        <copy file="${core.dir}/libraries/d3/d3.min.js" tofile="${app.dir}/d3.min.js"/>

        <!-- Copy the cordova file for the ios platform. We apply the correct cordova file for each platform after
             the build is completed -->
        <copy file="${src.dir}/build/cordova/ios/cordova.js" tofile="${app.dir}/cordova.js"/>

        <!-- Copy shared Web Central CSS files -->
        <concat destfile="${src.dir}/Common/resources/sass/mobileclient/svg/_htmldrawing.scss">
            <header trim="no" trimleading="yes">/*
                Do not add CSS definitions to this file. This file is copied from ../schema/ab-core/css/htmldrawing.css
                and is overwritten during the build
                */

            </header>
            <fileset file="${core.dir}/css/htmldrawing.css"/>
        </concat>

        <concat destfile="${src.dir}/Common/resources/sass/mobileclient/svg/_placement.scss">
            <header trim="no" trimleading="yes">/*
                Do not add CSS definitions to this file. This file is copied from ../schema/ab-core/css/placement.css
                and is overwritten during the build
                */

            </header>
            <fileset file="${core.dir}/css/placement.css"/>
        </concat>

        <concat destfile="${src.dir}/Common/resources/sass/mobileclient/svg/_redline.scss">
            <header trim="no" trimleading="yes">/*
                Do not add CSS definitions to this file. This file is copied from ../schema/ab-core/css/redline.css
                and is overwritten during the build
                */

            </header>
            <fileset file="${core.dir}/css/redline.css"/>
        </concat>

        <!-- Copy map libray files -->
        <copy file="${src.dir}/packages/Map/lib/leaflet.js" tofile="${app.dir}/leaflet.js"/>
        <copy file="${src.dir}/packages/Map/lib/esri-leaflet.js" tofile="${app.dir}/esri-leaflet.js"/>


    </target>

    <target name="minify-cordova">
        <!-- minify the cordova file for each platform. Save the files in the build temp folder -->
        <!-- ios -->
        <x-sencha-command>
            fs
            minify
            --from=${src.dir}/Common/lib/cordova/${platform.ios}/cordova.js
            --to=${src.dir}/build/cordova/${platform.ios}/cordova.js
            --compressor=yuicompressor
        </x-sencha-command>

        <!-- android -->
        <x-sencha-command>
            fs
            minify
            --from=${src.dir}/Common/lib/cordova/${platform.android}/cordova.js
            --to=${src.dir}/build/cordova/${platform.android}/cordova.js
            --compressor=yuicompressor
        </x-sencha-command>

        <!-- windows phone -->
        <x-sencha-command>
            fs
            minify
            --from=${src.dir}/Common/lib/cordova/${platform.windows}/cordova.js
            --to=${src.dir}/build/cordova/${platform.windows}/cordova.js
            --compressor=yuicompressor
        </x-sencha-command>

    </target>

    <target name="minify-libraries">
        <echo>---> base directory ${base.dir}</echo>
        <property name="core.dir" location="../../../../ab-core" relative="true" basedir="${base.dir}"/>
        <echo>----> core directory ${core.dir}</echo>

        <!-- concatenate and minify files for Common.scripts.loader.Drawing -->
        <x-sencha-command>
            fs
            concatenate
            --from=${core.dir}/libraries/base/base.js,${core.dir}/controls/drawing/svg/ab-svg-drawing-control.js,${core.dir}/controls/drawing/svg/ab-svg-drawing-popup.js,${core.dir}/libraries/svg/marker.js,${core.dir}/controls/drawing/marker-control.js
            --to=${app.dir}/drawing.js
            and
            minify
            --from=${app.dir}/drawing.js
            --to=${app.dir}/drawing.min.js
            --compressor=yuicompressor
        </x-sencha-command>

        <!-- concatenate and minify files for Common.scripts.loader.Redline -->
        <x-sencha-command>
            fs
            concatenate
            --from=${core.dir}/libraries/svg/placement.js,${core.dir}/libraries/svg/redline.js,${core.dir}/controls/drawing/svg/ab-svg-placement-control.js,${core.dir}/controls/drawing/svg/ab-svg-redline-control.js
            --to=${app.dir}/redline.js
            and
            minify
            --from=${app.dir}/redline.js
            --to=${app.dir}/redline.min.js
            --compressor=yuicompressor
        </x-sencha-command>

        <!-- concatenate and minify files for Common.scripts.loader.ImageCapture -->
        <x-sencha-command>
            fs
            concatenate
            --from=${core.dir}/libraries/svg/rgbcolor.js,${core.dir}/libraries/svg/StackBlur.js,${core.dir}/libraries/svg/canvg.js,${core.dir}/controls/drawing/svg/ab-svg-capture-control.js
            --to=${app.dir}/imagecapture.js
            and
            minify
            --from=${app.dir}/imagecapture.js
            --to=${app.dir}/imagecapture.min.js
            --compressor=yuicompressor
        </x-sencha-command>

        <!-- concatenate and minify files for Common.scripts.loader.Cluster -->
        <x-sencha-command>
            fs
            concatenate
            --from=${core.dir}/libraries/svg/zoomcluster.js,${core.dir}/controls/drawing/cluster-control.js
            --to=${app.dir}/cluster.js
            and
            minify
            --from=${app.dir}/cluster.js
            --to=${app.dir}/cluster.min.js
            --compressor=yuicompressor
        </x-sencha-command>

        <!-- concatenate and minify files for Common.scripts.loader.Marker -->
        <x-sencha-command>
            fs
            concatenate
            --from=${core.dir}/libraries/svg/marker.js,${core.dir}/controls/drawing/marker-control.js
            --to=${app.dir}/marker.js
            and
            minify
            --from=${app.dir}/marker.js
            --to=${app.dir}/marker.min.js
            --compressor=yuicompressor
        </x-sencha-command>

        <!-- concatenate and minify files for Map.script.loader.Google -->
        <x-sencha-command>
            fs
            minify
            --from=${core.dir}/controls/gis/google-leaflet.js
            --to=${app.dir}/leaflet.google.min.js
            --compressor=yuicompressor
        </x-sencha-command>

        <!-- minify startup.js -->
        <x-sencha-command>
            fs
            minify
            --from=${src.dir}/Common/startup.js
            --to=${app.dir}/startup.min.js
            --compressor=yuicompressor
        </x-sencha-command>

        <x-sencha-command>
            fs
            concatenate
            --from=${app.dir}/startup.min.js,${src.dir}/Common/lib/promise-6.1.0.min.js
            --to=${app.dir}/mobile-combined-lib.js
        </x-sencha-command>

    </target>

    <target name="copy-output" depends="clean-build-output, clean-app-folder, increment-build-number ">

        <fileset id="deployFileSet" dir="${build.dir}">
            <exclude name="**/archive/**"/>
            <exclude name="**/deltas/**"/>
            <exclude name="**/control_*.js/**"/>
        </fileset>

        <if>
            <equals arg1="${build.environment}" arg2="production"/>
            <then>
                <copy todir="${mobile.dir}/${platform.ios}/${app.name}">
                    <fileset refid="deployFileSet"/>
                </copy>

                <copy todir="${mobile.dir}/${platform.android}/${app.name}">
                    <fileset refid="deployFileSet"/>
                </copy>

                <copy todir="${mobile.dir}/${platform.windows}/${app.name}">
                    <fileset refid="deployFileSet"/>
                </copy>

                <for list="${language.include}" param="prop">
                    <sequential>
                        <copy todir="${mobile.dir}/${platform.ios}/${app.name}" file="${build.dir}/control_@{prop}.js" overwrite="true"/>
                        <copy todir="${mobile.dir}/${platform.ios}/${app.name}" file="${src.dir}/build/temp/language/lang_@{prop}.js" overwrite="true"/>
                        <copy todir="${mobile.dir}/${platform.android}/${app.name}" file="${build.dir}/control_@{prop}.js" overwrite="true"/>
                        <copy todir="${mobile.dir}/${platform.android}/${app.name}" file="${src.dir}/build/temp/language/lang_@{prop}.js" overwrite="true"/>
                        <copy todir="${mobile.dir}/${platform.windows}/${app.name}" file="${build.dir}/control_@{prop}.js" overwrite="true"/>
                        <copy todir="${mobile.dir}/${platform.windows}/${app.name}" file="${src.dir}/build/temp/language/lang_@{prop}.js" overwrite="true"/>
                    </sequential>
                </for>

                <!-- The build was done using the ios cordova file. Replace cordova file for the android and
                     windows platforms -->

                <copy file="${src.dir}/build/cordova/${platform.android}/cordova.js"
                      tofile="${mobile.dir}/${platform.android}/${app.name}/cordova.js" overwrite="true"/>
                <copy file="${src.dir}/build/cordova/${platform.windows}/cordova.js"
                      tofile="${mobile.dir}/${platform.windows}/${app.name}/cordova.js" overwrite="true"/>

            </then>
        </if>

        <!-- Delete the contents of the build temp directory -->
        <delete includeEmptyDirs="true">
            <fileset dir="${src.dir}/build/temp" includes="**/*" defaultexcludes="no"/>
        </delete>

        <!-- Delete the contents of the build cordova directory -->
        <delete includeEmptyDirs="true">
            <fileset dir="${src.dir}/build/cordova" includes="**/*" defaultexcludes="no"/>
        </delete>

        <!-- Delete the contents of the build production directory -->
        <delete includeEmptyDirs="true">
            <fileset dir="${src.dir}/build/production" includes="**/*" defaultexcludes="no"/>
        </delete>

    </target>

    <target name="clean-app-folder" depends="process-app-cache">
        <delete verbose="false">
            <fileset dir="${src.dir}/${app.name}">
                <include name="/*.js"/>
                <include name="/*.html_bac"/>
                <exclude name="app.js"/>
                <exclude name="bootstrap.js"/>
                
            </fileset>
        </delete>
    </target>

    <target name="clean-build-output">

        <delete dir="${mobile.dir}/${platform.ios}/${app.name}"/>
        <mkdir dir="${mobile.dir}/${platform.ios}/${app.name}"/>

        <delete dir="${mobile.dir}/${platform.android}/${app.name}"/>
        <mkdir dir="${mobile.dir}/${platform.android}/${app.name}"/>

        <delete dir="${mobile.dir}/${platform.windows}/${app.name}"/>
        <mkdir dir="${mobile.dir}/${platform.windows}/${app.name}"/>

    </target>

    <!-- Increment the App build number. Copy the build JSON file to the output folder -->
    <target name="increment-build-number">
        <tstamp>
            <format property="TODAY_EN" pattern="yyyy-MM-dd" locale="en"/>
            <format property="TSTAMP_EN" pattern="HH:mm" locale="en"/>
        </tstamp>

        <buildnumber file="${src.dir}//${app.name}/${app.name}.build.number"/>

        <echo file="${src.dir}//${app.name}/${app.name}.build.js" append="false">{"build":"@build.number@", "date":"${TODAY_EN} ${TSTAMP_EN}"}</echo>

        <replace
                file="${src.dir}//${app.name}/${app.name}.build.js"
                value="1"
                propertyFile="${src.dir}//${app.name}/${app.name}.build.number">
            <replacefilter token="@build.number@" property="build.number"/>
        </replace>

        <copy file="${src.dir}//${app.name}/${app.name}.build.js" tofile="${build.dir}/${app.name}.build.js" overwrite="true"/>

    </target>

</project>
