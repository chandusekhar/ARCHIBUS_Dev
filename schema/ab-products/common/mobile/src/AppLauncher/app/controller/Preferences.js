/**
 * Handles events generated by the Preferences View
 * @author Jeff Martin
 * @since 21.1
 */
Ext.define('AppLauncher.controller.Preferences', {
    extend: 'Ext.app.Controller',

    requires: [
        'Common.util.ConfigFileManager',
        'Common.sync.Manager',
        'AppLauncher.util.Utilities',
        'Common.model.UserInfo',
        'Common.util.VersionInfo'
    ],

    config: {
        refs: {
            preferencesView: 'preferencesPanel',
            preferenceList: 'preferenceList',
            changeUrlPanel: 'changeUrlPanel',
            logEnabledToggleField: 'togglefield[name=logenabled]',
            logLevelSelectField: 'preferencesPanel selectfield',
            settingPanel: 'setting',
            loggingSettingsPanel: 'loggingsettings',
            userSettingsPanel: 'usersettings',
            webCentralView: 'webcentralsettings',
            settingsDoneButton: 'button[action=settingsDone]'
        },
        control: {
            'button[action=displayPreferences]': {
                tap: 'onDisplayPreferences'
            },
            'button[action=cancelPreferences]': {
                tap: 'onCancelPreferences'
            },
            'button[action=resetWebCentralUrl]': {
                tap: 'onResetWebCentralUrl'
            },
            'button[action=changeWebCentralUrl]': {
                tap: 'onChangeWebCentralUrl'
            },
            'button[action=resetSyncHistory]': {
                tap: 'onResetSyncHistory'
            },
            logEnabledToggleField: {
                change: 'onLoggingChange'
            },
            'button[action=displayLog]': {
                tap: 'onDisplayLog'
            },
            'button[action=logDone]': {
                tap: 'onCloseLog'
            },
            'button[action=syncLog]': {
                tap: 'onLogSync'
            },
            'logpanel': {
                panelclose: 'onLogPanelClose'
            },
            preferenceList: {
                itemtap: 'onPreferenceListTap'
            },
            loggingSettingsPanel: {
                initialize: 'onLoggingSettingsPanelInit'
            },
            settingsDoneButton: {
                tap: 'onSettingsDone'
            },
            userSettingsPanel: {
                initialize: 'onUserSettingsPanelInit'
            },
            webCentralView: {
                initialize: 'onWebCentralPanelInit'
            },
            'button[action=clearData]': {
                tap: 'onClearData'
            },
            preferencesView: {
                show: 'onPreferencesViewShow'
            }
        },

        viewCache: [],

        currentView: null,

        baseUrl: '/schema/ab-products/common/mobile/',

        applicationUrl: '/AppLauncher/index.html',

        changeUrlPromptLabel: LocaleManager.getLocalizedString('Change URL', 'AppLauncher.controller.Preferences'),

        changeUrlMessage: LocaleManager.getLocalizedString('<p>Changing the Web Central URL requires the Mobile Client app to be stopped and restarted.</p><p>The app data will be removed from the device during the registration process.</p><p>Synchronize your data before proceeding to prevent any data loss.</p><br>', 'AppLauncher.controller.Preferences'),

        backgroundSyncResetMessage: LocaleManager.getLocalizedString('The background data sync flag will be reset.<br>The background data will be downloaded during the next application sync.<br>', 'AppLauncher.controller.Preferences'),

        doYouWishToContinueMessage: LocaleManager.getLocalizedString('Do you wish to continue?', 'AppLauncher.controller.Preferences'),

        urlRequiredMessage: LocaleManager.getLocalizedString('URL Required', 'AppLauncher.controller.Preferences'),

        resetSyncFlagPromptTitle: LocaleManager.getLocalizedString('Reset Sync Flag', 'AppLauncher.controller.Preferences')
    },

    init: function (app) {
        var me = this;
        app.on('userregistered', me.onUserRegistered, me);
        app.on('userunregistered', me.onUserUnRegistered, me);
        Common.controller.EventBus.on('changeurl', me.doChangeWebCentralUrl, me);
        Common.controller.EventBus.on('registrationviewclose', me.onRegistrationViewClosed, me);
    },

    /**
     * Parses the URL saved in the ConfigFileManager instance. Parses the URL
     * and displays the Web Central URL in the URL field.
     * @returns {string} The parsed URL
     */
    getWebCentralUrl: function () {
        var webCentralUrl = ConfigFileManager.url,
            index = webCentralUrl.indexOf('/archibus/');

        return webCentralUrl.substring(index, 0) + '/archibus';
    },

    /**
     * Displays the Reset URL panel
     */
    onResetWebCentralUrl: function () {
        this.onChangeWebCentralUrl();
    },

    onDisplayPreferences: function () {
        var preferenceListStore = Ext.getStore('Preferences');

        preferenceListStore.setData(this.getPreferenceListData());
    },

    /**
     * Prompts the user to change the Web Central URL configuration.
     */
    onChangeWebCentralUrl: function () {
        var me = this,
            changeUrlMessage = me.getChangeUrlMessage() + '<div style="text-align:center">' + me.getDoYouWishToContinueMessage() + '</div>';

        // Warn the user that the app will have to be restarted and that data may be lost.
        Ext.Msg.confirm(me.getChangeUrlPromptLabel(), changeUrlMessage, function (response) {
            if (response === 'yes') {
                me.doChangeWebCentralUrl();
            }
        });
    },

    /**
     * Deletes the cached application files.
     * Displays the Restart Device view.
     * @private
     */
    doChangeWebCentralUrl: function () {
        var me = this;
        Common.util.Database.deleteAllDatabases()
            .then(function() {
                me.clearConfigFileManager();
            })
            .then(function () {
                return me.deleteAppCacheFiles();
            })
            .then(function () {
                var restartDeviceView = Ext.create('Common.view.registration.RestartDevice');
                Ext.Viewport.add(restartDeviceView);
                restartDeviceView.setZIndex(300);
                restartDeviceView.show();
            })
            .then(null, function (error) {
                Ext.Msg.alert('', error);
                return Promise.reject();
            })
            .done();
    },

    clearConfigFileManager: function () {
        var me = this,
            baseUrl = me.getBaseUrl();

        return new Promise(function (resolve, reject) {
            // Save the new URL and un-register the device
            ConfigFileManager.url = baseUrl;
            ConfigFileManager.isRegistered = false;
            ConfigFileManager.isDeviceRegistered = false;
            ConfigFileManager.employeeId = '';
            ConfigFileManager.username = '';
            ConfigFileManager.dbMap = {};
            ConfigFileManager.sync(resolve, reject);
        });
    },

    deleteAppCacheFiles: function () {
        if (Ext.os.is.Android || Ext.os.is.Desktop) {
            // Android app data files are stored in the application sandbox.
            return Promise.resolve();
        } else {
            return Common.device.File.getFilesInDirectory('/')
                .then(function (fileEntries) {
                    var appDataFiles = [];
                    // Get all file entries with an .abdata extension
                    Ext.each(fileEntries, function (entry) {
                        if (entry.name.indexOf('.abdata') !== -1) {
                            appDataFiles.push(entry);
                        }
                    });
                    Promise.all(appDataFiles.map(function (entry) {
                        Log.log('Delete app cache file ' + entry.name, 'info');
                        Common.device.File.deleteFileWithFileEntry(entry);
                    }));
                });
        }
    },

    /**
     * Prompts the user to reset the Background Data synchronization history data.
     * If the user elects to reset the data the contents of the Download table are
     * deleted.
     * The next sync action from any of the users applications will cause the
     * background data to be downloaded for that application
     *
     */
    onResetSyncHistory: function () {
        var me = this,
            resetMessage = me.getBackgroundSyncResetMessage() + '<div style="text-align:center">' +
                me.getDoYouWishToContinueMessage() + '</div>';

        Ext.Msg.confirm(me.getResetSyncFlagPromptTitle(), resetMessage, function (response) {
            if (response === 'yes') {
                me.resetTableDownloadTimes();
            }
        });
    },

    resetTableDownloadTimes: function () {
        var downloadStore = Ext.getStore('tableDownloadStore'),
            downloadTime = new Date(1900, 0, 1, 12, 0, 0);

        downloadStore.load(function (records) {
            Ext.each(records, function (record) {
                record.set('downloadTime', downloadTime);
                record.set('reset', 1);
            });
            downloadStore.sync();
        });
    },

    onLoggingChange: function (field, newValue) {
        var loggingSettingsPanel = this.getLoggingSettingsPanel(),
            disable = !newValue;

        loggingSettingsPanel.down('selectfield').setDisabled(disable);
        loggingSettingsPanel.setFileWriterDisabled(disable);
        loggingSettingsPanel.setDatabaseWriterDisabled(disable);
        loggingSettingsPanel.setConsoleWriterDisabled(disable);
    },

    createView: function (viewName) {
        return Ext.create('AppLauncher.view.' + viewName);
    },

    onDisplayLog: function () {
        var logPanel = Ext.create('AppLauncher.view.Log');
        Ext.Viewport.add(logPanel);
        logPanel.show();
    },

    onLogPanelClose: function (panel) {
        panel.hide();
        panel.destroy();
    },

    onLoggingSettingsPanelInit: function (panel) {
        panel.initValues();
    },

    onUserSettingsPanelInit: function (panel) {
        var userInfoStore = Ext.getStore('userInfo'),
            record = userInfoStore.getAt(0);

        if (record && panel) {
            panel.setRecord(record);
        }
    },

    onUserSettingsPanelClear: function (panel) {
        var record = new Common.model.UserInfo();

        if (record && panel) {
            panel.setRecord(record);
        }
    },

    onWebCentralPanelInit: function (panel) {
        panel.down('textfield[name=url]').setValue(this.getWebCentralUrl());
    },

    onSettingsDone: function () {
        if (this.preferencesPanel) {
            this.preferencesPanel.hide();
        }
    },

    onUserRegistered: function () {
        var me = this,
            userSettingsPanel = me.getUserSettingsPanel();

        me.onUserSettingsPanelInit(userSettingsPanel);
    },

    /**
     * Clears the user information from the User Settings view.
     */
    onUserUnRegistered: function () {
        var me = this,
            userSettingsPanel = me.getUserSettingsPanel();

        me.onUserSettingsPanelClear(userSettingsPanel);
    },

    /**
     * Uploads the log data to Web Central
     */
    doLogSync: function () {
        var store = Ext.getStore('messages'),
            loadingMessage = LocaleManager.getLocalizedString('Uploading Log Messages', 'AppLauncher.controller.Preferences'),
            onFinish = function () {
                SyncManager.endSync();
                Mask.hideLoadingMask();
                Common.log.LogManager.setIsLoggingEnabled(true);
                Common.service.Session.end();
            };

        Common.log.LogManager.setIsLoggingEnabled(false);

        if (SyncManager.syncIsActive) {
            return;
        }

        Network.checkNetworkConnectionAndLoadDwrScripts(true)
            .then(function (isConnected) {
                if (isConnected) {
                    SyncManager.startSync();
                    Common.service.Session.start()
                        .then(function () {
                            Mask.displayLoadingMask(loadingMessage);
                            return store.synchronize();
                        })
                        .then(null, function (error) {
                            Ext.Msg.alert('', error);
                            return Promise.reject();
                        })
                        .done(onFinish, onFinish);
                }
            });
    },

    onLogSync: (function () {
        var isTapped = false;
        return function () {
            if (!isTapped) {
                isTapped = true;
                this.doLogSync();
                setTimeout(function () {
                    isTapped = false;
                }, 500);
            }
        };
    })(),

    /**
     * Returns the data used for the Preference list items
     * @returns {Object[]}
     */
    getPreferenceListData: function () {
        var data = [
            {
                id: 1,
                text: LocaleManager.getLocalizedString('User', 'AppLauncher.controller.Preferences'),
                view: 'UserSettings'
            },
            {
                id: 2,
                text: LocaleManager.getLocalizedString('Sync', 'AppLauncher.controller.Preferences'),
                view: 'SyncSettings'
            },
            {
                id: 3,
                text: LocaleManager.getLocalizedString('Logging', 'AppLauncher.controller.Preferences'),
                view: 'LoggingSettings'
            },
            {
                id: 4,
                text: LocaleManager.getLocalizedString('Version', 'AppLauncher.controller.Preferences'),
                view: 'Version'
            }
        ];

        // The Web Central URL can only be changed from the device
        if (Ext.browser.is.PhoneGap) {
            data.push({
                id: 5,
                text: LocaleManager.getLocalizedString('Web Central URL', 'AppLauncher.controller.Preferences'),
                view: 'WebCentral'
            });
        }

        return data;
    },

    onClearData: function () {
        var me = this,
            message = LocaleManager.getLocalizedString('This action will remove all of your data from the device. Do you want to proceed?', 'AppLauncher.controller.Preferences');
        Ext.Msg.confirm('', message, function (response) {
            if (response === 'yes') {
                me.doClearData();
            }
        });
    },

    /**
     * Deletes the database if the app is in native mode. Deletes the contents of the database if the app is in desktop
     * mode. Removes all of the users downloaded image and document files.
     */
    doClearData: function () {
        return AppLauncher.util.Utilities.deleteDataFromDatabase()
            .then(function () {
                var databaseName = SqliteConnectionManager.name;
                return Common.util.Database.deleteDatabase(databaseName)
                    .then(function () {
                        return AppLauncher.util.Utilities.deleteUserFiles();
                    })
                    .then(function () {
                        return new Promise(function (resolve, reject) {
                            var userName = ConfigFileManager.username;
                            delete ConfigFileManager.dbMap[userName];
                            ConfigFileManager.isDeviceRegistered = false;
                            ConfigFileManager.username = '';
                            ConfigFileManager.sync(resolve, reject);
                        });
                    })
                    .then(function () {
                        document.location.reload();
                    });
            });
    },

    /**
     * Handles the Registration View close event.
     * Displays the Preferences form.
     */
    onRegistrationViewClosed: function () {
        this.onDisplayPreferences();
    },

    onPreferencesViewShow: function () {
        // TODO: Check if device is registered and update user view.
    }


});