var nullValueCode = 'WW99';

function onTreeSelectAll(panelId, select) {
	if (select) {
		View.panels.get(panelId).selectAll();
	} else View.panels.get(panelId).unselectAll();
}

function onTreeExpandAll(panelId, expandTree, treeNode){
	var treePanel = View.panels.get(panelId);
	if (!valueExists(treeNode)) treeNode = treePanel.treeView.getRoot();
	if (!treeNode.isRoot()) {
		if(expandTree){
			if (!treeNode.expanded) {
				treePanel.refreshNode(treeNode);
				treeNode.expand();
			}
		} else {
			if (treeNode.expanded) {
				treeNode.collapse();
			}
		}
	}
    if(treeNode.hasChildren()){
    	var i=0;
        for(i=0; i<treeNode.children.length; i++){
        	var node = null;
            node = treeNode.children[i];
            onTreeExpandAll(panelId, expandTree, node);
        }
    }
}

function getConsoleBlRestriction(consoleId) {
	
	var console = View.panels.get(consoleId);
	var restriction = " 1=1 ";
	
	//construct the chart restriction generated by fields from the bl table
	var use1 = console.getFieldValue('bl.use1');
	var construction_type = console.getFieldValue('bl.construction_type');
	var age = console.getFieldValue('bl.age');
	var bl_count_occup_from = console.getFieldValue('bl.count_occup.from');
	var bl_count_occup_to = console.getFieldValue('bl.count_occup.to');

	if (use1 != '') restriction += " AND bl.use1 = '" + getValidRestVal(use1) + "' ";
	if (construction_type != '') restriction += " AND bl.construction_type = '" + getValidRestVal(construction_type) + "' ";
	if (age != ''){
		var age_date=new Date();
		var age_date_ISO = FormattingDate(age_date.getDate(), age_date.getMonth() + 1, (age_date.getFullYear()-age), 'YYYY-MM-DD');
		restriction += " AND bl.date_bl >= ${sql.date('" + age_date_ISO + "')}";
	}
	if (bl_count_occup_from != '') restriction += " AND bl.count_occup >" + bl_count_occup_from;
	if (bl_count_occup_to != '') restriction += " AND bl.count_occup <= " + bl_count_occup_to;

	return restriction;
}

function getConsoleBillArchiveRestriction(consoleId, includeTimePeriod) {

	var console = View.panels.get(consoleId);
	var restriction = " 1=1 ";
	
	//construct the chart restriction generated by fields from the bill_archive table
	var bill_period_from = console.getFieldValue('bill_archive.time_period.from');
	var bill_period_to = console.getFieldValue('bill_archive.time_period.to');
	
	if (includeTimePeriod == undefined || includeTimePeriod) {		
		if (bill_period_from != '') restriction += " AND bill_archive.time_period >= '" + bill_period_from + "' ";
		if (bill_period_to != '') restriction += " AND bill_archive.time_period <= '" + bill_period_to + "' ";
	}  	
 
	if (console.hasFieldMultipleValues('bill_archive.bill_type_ids')) {
		var valuesArray = console.getFieldMultipleValues('bill_archive.bill_type_ids');
		var billTypesRest = '';
		for ( var i = 0; i < valuesArray.length; i++) {
			var bill_type_id = valuesArray[i];
			if (bill_type_id != '') billTypesRest += " OR bill_archive.bill_type_id ='" + getValidRestVal(bill_type_id) + "'";
			
		}
		if (billTypesRest) {
			restriction += ' AND (' + billTypesRest.substring(3) + ')';
		}
	} else {
		var bill_type_id = console.getFieldValue('bill_archive.bill_type_ids');
		if (bill_type_id != '') restriction += " AND bill_archive.bill_type_id = '" + getValidRestVal(bill_type_id) + "' ";
	}
 
	var bill_type_id = console.getFieldValue('bill_archive.bill_type_id');
	if (bill_type_id != '') restriction += " AND bill_archive.bill_type_id = '" + getValidRestVal(bill_type_id) + "' ";	 
	
	var vn_id = console.getFieldValue('bill_archive.vn_id');
	if (vn_id != '') restriction += " AND bill_archive.vn_id = '" + getValidRestVal(vn_id) + "' ";

	return restriction;
}

function getTreeRestriction(panelId) {
	
	var tree = View.panels.get(panelId);
	var restriction = " 1=1 ";
	
	//construct the chart restriction generated by the selected buildings in the tree
	var levelIndex = 5;
	var nodes = tree.getSelectedNodes(levelIndex);
	var values = '';
	for (var i = 0; i < nodes.length; i++){
		var value = nodes[i].data['bl.bl_id'];
		values += (values=='')?'':', ';
		values += "'" + getValidRestVal(value) + "'";
	}
	if (values != '') {
		values = "(" + values + ")";
		restriction += 'AND (bill_archive.bl_id IN ' + values;
	}
	restriction += (restriction == ' 1=1 ')?'':')';
	return restriction;
}

function getValidRestVal(value)
{
	value = value.replace(/\'/g, "\'\'");
	value = value.replace(/&apos;/g, "\'\'");
	return value;
}

//Replace NULL values in the tree by translatable messages
function afterGeneratingTreeNode(node){
	
	var label = node.label;
	var levelIndex = node.level.levelIndex;
	if (levelIndex == 0){
		node.setUpLabel('<b>' + getMessage('world') + '</b>');
	} else {
		if(label.indexOf(nullValueCode)!= -1){
			if (levelIndex == 1){
				node.setUpLabel('<b>' + getMessage('msg_no_ctry_id') + '</b>');
			} else if (levelIndex == 2){
				node.setUpLabel('<b>' + getMessage('msg_no_city_id') + '</b>');
			} else if (levelIndex == 3){
				node.setUpLabel('<b>' + getMessage('msg_no_site_id') + '</b>');
			} else if (levelIndex == 4){
				node.setUpLabel('<b>' + getMessage('msg_no_pr_id') + '</b>');
			} else if (levelIndex == 5){
				node.setUpLabel('<b>' + getMessage('msg_no_bl_id') + '</b>');
			}
		}
	}
}

function getLocationDetail(value) {
	//construct the query to select the level of detail for location to be showed in the chart
	var locDtl = '';
	switch (value) {
		case'byCity': 
				locDtl = " (CASE WHEN bl.city_id IS NOT NULL THEN RTRIM(bl.city_id) "; 
				locDtl += "		 WHEN site.city_id IS NOT NULL THEN RTRIM(site.city_id)  "; 
				locDtl += "		 ELSE ${parameters['noCity']} END) ";break;
		case 'bySite': 
				locDtl = " RTRIM(bill_archive.site_id) "; break;
		case 'byBuilding': 	
				locDtl = " RTRIM(bill_archive.bl_id) "; break;
	}
	return locDtl;
}

function onDrillDownBillArchive(item){
	
	var controller = View.controllers.get('energyCostBase');
	var selectedLocationValue = item.selectedChartData['bill_archive.locDtl'];
	var selectedLocationOption = controller.detailOptionSelected;
	
	//apply also the restriction to the grid panel to be showed with the details if clicking on the chart
	var finalRestriction = controller.getFinalRestriction();
	/* finalRestriction += " AND " + controller.treeRestriction;
	finalRestriction += " AND " + controller.consoleBillArchiveRestriction;	
	*/
	//Depending on the location level of detail showed in the chart, filter the pop-up window with the selected bar location
	if (selectedLocationValue != undefined) {
		switch (selectedLocationOption) {
			case 'byCity': 
				finalRestriction += " AND city_id='" + getValidRestVal(selectedLocationValue) + "' "; break;
			case 'bySite': 
				finalRestriction += " AND bill_archive.site_id='" + getValidRestVal(selectedLocationValue) + "' "; break;
			case 'byBuilding': 	
				finalRestriction += " AND bill_archive.bl_id='" + getValidRestVal(selectedLocationValue) + "' "; break;
		}
	} 
	
	var unitsConversionFactor = 1;

	controller.energyDrillDownBillArchive.addParameter('finalRestriction', finalRestriction);
	controller.energyDrillDownBillArchive.addParameter('unitsConversionFactor', unitsConversionFactor);
	controller.energyDrillDownBillArchive.refresh();
	controller.energyDrillDownBillArchive.showInWindow( {width: 1000, height: 600, closeButton: true}); 

}

function onDrillDownToBillLines(){
	var controller = View.controllers.get('energyCostBase');
	var selectedRow = controller.energyDrillDownBillArchive.rows[controller.energyDrillDownBillArchive.selectedRowIndex];
	
	var res = new Ab.view.Restriction();
	res.addClause('bill_archive.bill_id',getValidRestVal(selectedRow['bill_archive.bill_id']),'=');
	res.addClause('bill_archive.vn_id',getValidRestVal(selectedRow['bill_archive.vn_id']),'=');
	View.openDialog('ab-energy-archive-bill-line-list.axvw',res,false,{width: 1000, height: 600, closeButton: true});
	
//	controller.energyDrillDownBillLines.showInWindow( {width: 1000, height: 600, closeButton: true, 
//			restriction: " bill_id='" + getValidRestVal(selectedRow['bill_archive.bill_id']) + "' AND vn_id='" + getValidRestVal(selectedRow['bill_archive.vn_id']) + "'"} );
	
}

function onChangeBillType(fieldName, newValue, oldValue) { 
	abEnergyBillCommonController.setBillUnitsOptions(newValue); 
}
