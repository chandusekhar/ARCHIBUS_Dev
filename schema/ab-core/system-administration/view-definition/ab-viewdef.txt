
ab-viewdef.txt
Internal doc for the View Definition Wizard


________________
Summary of Files


---- Objects

ab-viewdef-view.js          JavaScript object holding the view

ab-viewdef-convert.js       Convert avw and axvws to JavaScript object format
                            Smooths over the differences between .avw and .axvw files.

ab-viewdef-convert-avw.js   Convert .avw files to JavaScript statements that can build a view in memory

ab-viewdef-convert-axvw.js  Same but for .axvw files.

ab-viewdef-readfile.js      Read and write files to and from local disks

ab-viewdef-grid.js          Extend the standard grid so we can use it in the UI to view and alter portions of the view


---- UI Code

ab-viewdef-wizard.js        Restrictions and the like for the .axvw for the wizard pages.

__________
Test Files


ab-viewdef-view-test.htm    Test the view conversion functions
ab-viewdef-view-test.js

ab-viewdef-grid.htm         Test the extensions to the grid
ab-viewdef-gridtest.js


________
Approach

The routines read the file into a variable, use regex statements to
convert that variable into a series of JavaScript statements, then
eval() those JavaScript statements to define a view object.

The routines then take a view pattern, and use more regex statements
to insert the proper portions of the view object into the patterns.


_____________
Pattern Files

The \view-patterns folder holds .axvw's that act as the templates for
each type and pattern of view that the View Definition Wizard can
create.

Each pattern file corresponds to one of the patterns that can
be created with the View Definition Wizard.

Each pattern file is a standard .axvw file that you can load normally 
(e.g. by entering http:\\localhost:8080\archibus\ab-viewdef-2drill-to-table.axvw
in the address bar).

Each pattern file also has a series of macros and templates
identifying off portions of the .axvw file that the View Definition
Wizard will either update or replace.  

For example, the view title is defined with the macro below:

    <title translatable="true">Viewdef-View-Title</title>

The pattern files let us modify the view patterns without
editing the JavaScript code of the View Definition Wizard.

______________
ViewDef Macros

---- Macros

Each macro has the following form:
    ViewDef-<Location>-<Tag>-<Element>
For instance:
    ViewDef-View-Title

---- Locations

The "locations" dictate where in the view file the tags are to be placed.

The available "Locations" are:
    View
    TopDrillDownTgrp
    DrillDownTgrp
    DataTgrp

The location dictates which portion or table-group of the view the
attribute data is to be pulled.

---- Tags

"Tags" are the specific ARCHIBUS view tags that are being placed.

The available tags are:
o Title
o DataSource
o FieldList1 or FieldList2
o Example

---- Attributes

"Attributes" are the specific values for the ARCHIBUS view attributes.

Attributes used are:
o title
o table_name
o field_name

---- Templates

Template names follow the same conventions as macros only
they:
o Exist within HTML <!-- --> comments.
o Define a segment of the view that has an entire series of tags to replace.
o Use Begin and End bookends to mark the segment's start and finish.

That is, each template has the following form:
    ViewDef-<Location>-<Tag>-<Element>-<Begin|End>

The bookends are:
o "Begin"   Begin section to replace.
o "End"     End the section to replace.

___________________
Replacement Actions

There are two types of replacement actions.

---- Macros

The Wizard will replace macros named per the conventions above.

For instance, the panel title of the Drill-down Table group would be specified as:

    <title translatable="true">Viewdef-DrillDownTgrp-Panel-Title</title>


---- Templates

The Wizard will use different rules to replace the segments of the
view called out by a template based on the type of template.

o DataSource.  The Wizard will replace the entire datasource and
  include any fields, sort order, parsed restriction, or SQL
  restriction.

o FieldList.  The Wizard will take the elements within the
  FieldList section to be a template to repeat for each visible field.
  Make sure this is within the <fields></fields> tag.

  The FieldList section is not a true view tag until it is
  replaced, so the template has the right form but is
  commented out:

  <!-- ViewDef-DrillDownTgrp-FieldList1-Begin 
        [... template contents to repeat for each field in resulting view...]
   ViewDef-DrillDownTgrp-FieldList1-End -->


o Example.  The wizard will erase anything within example tags:
   <!-- ViewDef-Example-Begin -->
        [ ... contents to omit in resulting view ...]
  <!-- ViewDef-Example-End -->

  In this way, you can add example tags so that the pattern file
  loads as a real view for testing and illustrating the pattern, but
  the replacement tags are used instead in the actual result view.





 